name: Deploy to Cloudflare R2

on:
  workflow_dispatch:
  push:
  repository_dispatch:
    types: [run-deployment]
permissions:
  contents: write
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.RSS_REPO_TOKEN }} # Read-only access to necessary repos
          persist-credentials: false
      - name: Clone build dependencies
        run: git clone --depth 1 https://github.com/asfu222/BlueArchiveLocalizationTools.git
      - name: Restore FlatData Cache
        uses: actions/cache@v4
        with:
          path: BlueArchiveLocalizationTools/Extracted/FlatData
          key: ${{ runner.os }}-flatdata-${{ hashFiles('ba.env') }}

      - name: Download updated assets
        run: |
          chmod +x update.sh
          ./update.sh

      - name: Restore Excel Cache
        uses: actions/cache@v4
        with:
          path: |
            BlueArchiveLocalizationTools/Extracted/Table/Excel
            BlueArchiveLocalizationTools/Extracted/Temp/Table/Excel
          key: ${{ runner.os }}-excelzip-${{ hashFiles('Excel.zip') }}
      - name: Restore ExcelDB Cache
        uses: actions/cache@v4
        with:
          path: |
            BlueArchiveLocalizationTools/Extracted/Table/ExcelDB
          key: ${{ runner.os }}-exceldb-${{ hashFiles('ExcelDB.db') }}
          
      - name: Get latest commit hash for scenariovoice
        run: |
          LATEST_VOICE_COMMIT=$(git ls-remote https://x-access-token:${{ secrets.RSS_REPO_TOKEN }}@github.com/asfu222/scenariovoice.git HEAD | awk '{ print $1 }')
          echo "LATEST_VOICE_COMMIT=$LATEST_VOICE_COMMIT" >> $GITHUB_ENV      
          
      - name: Restore ScenarioVoice Cache
        uses: actions/cache@v4
        with:
          path: |
            assets/scenariovoice/latest/MediaResources/GameData/Audio/VOC_CN/CN_Main_*.zip
            assetsBuildSrc/scenariovoice/latest/MediaResources/GameData/voice_file_names.json
          key: ${{ runner.os }}-scenariovoice-${{ env.LATEST_VOICE_COMMIT }}

      - name: Clone scenariovoice if not exist
        run: |
          if [ ! -d "assets/scenariovoice" ]; then
            echo "Cache miss: Cloning scenariovoice..."
            git clone https://x-access-token:${{ secrets.RSS_REPO_TOKEN }}@github.com/asfu222/scenariovoice.git assets/scenariovoice
          fi

      - name: Setup git credentials
        run: |
            git config url."https://api:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
            git config url."https://ssh:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "ssh://git@github.com/"
            git config url."https://git:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "git@github.com:"
            git submodule foreach '
                git config url."https://api:${{ secrets.RSS_REPO_TOKEN }}@github.com/".insteadOf "https://github.com/"
                git config url."https://ssh:${{ secrets.RSS_REPO_TOKEN }}@github.com/".insteadOf "ssh://git@github.com/"
                git config url."https://git:${{ secrets.RSS_REPO_TOKEN }}@github.com/".insteadOf "git@github.com:"
            '
      - name: Configure Submodules to Track Branches
        run: |
          git submodule foreach '
            git checkout main || git checkout -b main
            git branch --set-upstream-to=origin/main main
          '
      - name: Update Submodules
        run: git submodule update --recursive --remote
        
      - name: Configure Git Identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Update Submodule References
        run: |
          submodule_paths=$(git submodule status | awk '{ print $2 }')
          for submodule in $submodule_paths; do
            git add $submodule
          done
          if git diff --cached --quiet; then
            echo "子模块已是最新状态"
          else
            git commit -m "更新子模块指针 [skip ci]"
            git push origin
          fi

      - name: Decompress Assets
        run: find ./assets -name '*.gz' -exec gzip -d {} \;
        
      - name: Cleanup git files
        run: find ./assets -name ".git" -exec rm -rf {} +
        
      - name: Restore Excel.zip Build Cache
        uses: actions/cache@v4
        with:
          path: |
            assets/beicheng/latest/TableBundles/Excel.zip
          key: ${{ runner.os }}-built_excelzip-${{ hashFiles('assets/beicheng/latest/TableBundles/buildSrc/Excel/*') }}-${{ hashFiles('Excel.zip') }}

      - name: Restore ExcelDB.db Build Cache
        uses: actions/cache@v4
        with:
          path: |
            assets/beicheng/latest/TableBundles/ExcelDB.db
          key: ${{ runner.os }}-built_exceldb-${{ hashFiles('assets/beicheng/latest/TableBundles/buildSrc/ExcelDB/*') }}-${{ env.LATEST_VOICE_COMMIT }}-${{ hashFiles('ExcelDB.db') }}

      - name: Build Assets
        run: |
          chmod +x build.sh
          ./build.sh
      - name: Update version.hash
        run: |
          mkdir -p ./assets/static/
          LATEST_COMMIT_MESSAGE=$(git log -1 --pretty=%B HEAD)
          git rev-parse HEAD > ./assets/static/version.hash
          git add ./assets/static/version.hash
          if git diff --cached --quiet; then
            echo "版本号已是最新"
          else
            git commit -m "更新版本号 [skip ci]"
            git push origin
          fi
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.REDIRECT_SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H prod-clientpatch.bluearchive.me >> ~/.ssh/known_hosts

      - name: Update config files
        run: |
          ssh ubuntu@prod-clientpatch.bluearchive.me "rm -rf /home/ubuntu/redirect_server/server_cfg/*"
          rsync -av --include='*/' --include='*/catalog.json' --exclude='*' ./assets/ ubuntu@prod-clientpatch.bluearchive.me:/home/ubuntu/nginx_redirect_server/server_cfg/

          
      - name: Restart Redirect Server
        run: |
          ssh ubuntu@prod-clientpatch.bluearchive.me "
            cd /home/ubuntu/nginx_redirect_server/
            sudo openresty -s quit -c /home/ubuntu/nginx_redirect_server/nginx.conf || sudo pkill openresty
            sudo openresty -c /home/ubuntu/nginx_redirect_server/nginx.conf
          "
      - name: Install rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash
      
      - name: Configure rclone for Cloudflare R2
        run: |
          rclone config create r2 s3 provider=Cloudflare env_auth=true endpoint=${{ secrets.R2_ENDPOINT }} acl=public-read
      - name: Upload files to Cloudflare R2 without aws-chunked
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
        run: |
          rclone copy assets/ r2:bluearchive --s3-upload-cutoff 1G --s3-chunk-size 5M --s3-disable-checksum
      - name: Purge Cloudflare Cache
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_ZONE_ID }}/purge_cache" \
             -H "Authorization: Bearer ${{ secrets.CF_PURGE_TOKEN }}" \
             -H "Content-Type: application/json" \
             --data '{"purge_everything":true}'  
      #- name: Purge Edge Servers Cache
      #  run: |
      #    ssh ubuntu@prod-clientpatch.bluearchive.me "
      #    cd /home/ubuntu/nginx_redirect_server/ &&
      #    nohup timeout 600 ./clear-edge-cache.sh > clear-edge-cache.log 2>&1 &
      #  "
      #- name: Check if should deploy
      #  id: check_deploy
      #  run: |
      #    if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
      #      echo "Manual trigger – proceeding with deployment."
      #      echo "should_deploy=true" >> $GITHUB_ENV
      #      exit 0
      #    fi
      #    PREVIOUS_DEPLOY_URL="https://bluearchive.me/.last_deployed_commit"
      #    curl -s $PREVIOUS_DEPLOY_URL > .last_deployed_commit
      #    if [ -f .last_deployed_commit ]; then
      #      LAST_DEPLOYED=$(cat .last_deployed_commit)
      #    else
      #      LAST_DEPLOYED=""
      #    fi
      #    CURRENT=$(git rev-parse HEAD)
      #    echo "Current commit: $CURRENT"
      #    echo "Last deployed commit: $LAST_DEPLOYED"
      #    if [ "$CURRENT" = "$LAST_DEPLOYED" ]; then
      #      echo "No new commit detected. Skipping deployment."
      #      echo "should_deploy=false" >> $GITHUB_ENV
      #    else
      #      echo "New commit detected. Proceeding with deployment."
      #      echo "should_deploy=true" >> $GITHUB_ENV
      #      echo $CURRENT > ./assets/.last_deployed_commit
      #    fi
          
      #- name: Upload Artifact to GitHub Pages
      #  uses: actions/upload-pages-artifact@v3
      #  if: ${{ env.should_deploy == 'true' }}
      #  with:
      #    path: './assets'

      #- name: Deploy to GitHub Pages
      #  uses: actions/deploy-pages@v4
      #  if: ${{ env.should_deploy == 'true' }}
