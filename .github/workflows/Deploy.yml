name: Deploy to Cloudflare R2

on:
  workflow_dispatch:
  push:
  repository_dispatch:
    types: [run-deployment]
permissions:
  contents: write
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.RSS_REPO_TOKEN }} # Read-only access to necessary repos
      - name: Clone build dependencies
        run: git clone --depth 1 https://github.com/asfu222/BlueArchiveLocalizationTools.git
      - name: Restore FlatData Cache
        uses: actions/cache@v4
        with:
          path: BlueArchiveLocalizationTools/Extracted/FlatData
          key: ${{ runner.os }}-flatdata-${{ hashFiles('ba.env') }}
          restore-keys: |
            ${{ runner.os }}-flatdata-

      - name: Download updated assets
        run: |
          chmod +x update.sh
          ./update.sh

      - name: Restore Excel Cache
        uses: actions/cache@v4
        with:
          path: |
            BlueArchiveLocalizationTools/Extracted/Table/Excel
            BlueArchiveLocalizationTools/Extracted/Temp/Table/Excel
          key: ${{ runner.os }}-excelzip-${{ hashFiles('Excel.zip') }}
          restore-keys: |
            ${{ runner.os }}-excelzip-

      - name: Configure Submodules to Track Branches
        run: |
          git submodule foreach '
            git checkout main || git checkout -b main
            git branch --set-upstream-to=origin/main main
          '
          
      - name: Update Submodules
        run: git submodule update --recursive --remote
        
      - name: Configure Git Identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Update version.hash
        run: |
          mkdir -p ./assets/static/
          echo $(( $(cat ./assets/static/version.hash 2>/dev/null || echo 0) + 1 )) > ./assets/static/version.hash
          git add ./assets/static/version.hash
          git commit -m "更新版本号"

      #- name: Setup GitHub Pages
      #  uses: actions/configure-pages@v5
      - name: Update Submodule References
        run: |
          submodule_paths=$(git submodule status | awk '{ print $2 }')
          for submodule in $submodule_paths; do
            git add $submodule
          done
          if git diff --cached --quiet; then
            echo "子模块已是最新状态"
          else
            git commit -m "更新子模块指针 [skip ci]"
          fi
          
      - name: Push changes
        run: |
          git fetch origin
          if git diff --quiet @{upstream}; then
            echo "No changes to push."
          else
            echo "Changes detected, pushing to remote..."
            git stash
            git pull --rebase
            git stash pop
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          fi

      - name: Decompress Assets
        run: find ./assets -name '*.gz' -exec gzip -d {} \;

      - name: Build Assets
        run: |
          chmod +x build.sh
          ./build.sh
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.REDIRECT_SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H prod-clientpatch.bluearchive.me >> ~/.ssh/known_hosts

      - name: Update config files
        run: |
          ssh ubuntu@prod-clientpatch.bluearchive.me "rm -rf /home/ubuntu/redirect_server/server_cfg/*"
          rsync -av --include='*/' --include='catalog.json' --exclude='*' ./assets/ ubuntu@prod-clientpatch.bluearchive.me:/home/ubuntu/redirect_server/server_cfg/

          
      - name: Restart Redirect Server
        run: |
          ssh ubuntu@prod-clientpatch.bluearchive.me "
            sudo screen -S redirect_server -X quit || true
            sudo kill -9 $(sudo lsof -t -i:443) 2>/dev/null
            sudo screen -dmS redirect_server bash -c 'cd /home/ubuntu/redirect_server && source venv/bin/activate && python server.py'
          "

      - name: Deploy to Cloudflare R2
        env: 
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: auto
          AWS_ENDPOINT_URL: ${{ secrets.R2_ENDPOINT }}
          AWS_MAX_ATTEMPTS: 5
        run: aws s3 sync assets/ s3://bluearchive/ --exclude ".git" --checksum-algorithm CRC32
        
      - name: Purge Cloudflare Cache
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_ZONE_ID }}/purge_cache" \
             -H "Authorization: Bearer ${{ secrets.CF_PURGE_TOKEN }}" \
             -H "Content-Type: application/json" \
             --data '{"purge_everything":true}'
          
      #- name: Check if should deploy
      #  id: check_deploy
      #  run: |
      #    if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
      #      echo "Manual trigger – proceeding with deployment."
      #      echo "should_deploy=true" >> $GITHUB_ENV
      #      exit 0
      #    fi
      #    PREVIOUS_DEPLOY_URL="https://bluearchive.me/.last_deployed_commit"
      #    curl -s $PREVIOUS_DEPLOY_URL > .last_deployed_commit
      #    if [ -f .last_deployed_commit ]; then
      #      LAST_DEPLOYED=$(cat .last_deployed_commit)
      #    else
      #      LAST_DEPLOYED=""
      #    fi
      #    CURRENT=$(git rev-parse HEAD)
      #    echo "Current commit: $CURRENT"
      #    echo "Last deployed commit: $LAST_DEPLOYED"
      #    if [ "$CURRENT" = "$LAST_DEPLOYED" ]; then
      #      echo "No new commit detected. Skipping deployment."
      #      echo "should_deploy=false" >> $GITHUB_ENV
      #    else
      #      echo "New commit detected. Proceeding with deployment."
      #      echo "should_deploy=true" >> $GITHUB_ENV
      #      echo $CURRENT > ./assets/.last_deployed_commit
      #    fi
          
      #- name: Upload Artifact to GitHub Pages
      #  uses: actions/upload-pages-artifact@v3
      #  if: ${{ env.should_deploy == 'true' }}
      #  with:
      #    path: './assets'

      #- name: Deploy to GitHub Pages
      #  uses: actions/deploy-pages@v4
      #  if: ${{ env.should_deploy == 'true' }}
